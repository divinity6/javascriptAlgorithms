/**
 * 프로그람 설명문서 주석
 * 2022.08.07
 *
 *
 *           ===== Big O Notation =====
 *
 *  - 저번 시간에 코드를 비교할때, 시간을 비교하는 것은 수치가
 *    정확하지 않아 문제가 있다는 것을 이야기 했었다
 *
 *  --> 그렇다면, 시간을 사용하지 않으면 무엇을 사용하는가?
 *
 *  --> 코드가 실행되는 정확한 시간을 초로 측정하는 것보다
 *      컴퓨터가 처리해야하는 연산 갯수를 세면 된다!
 *
 *   - 어떤 기기를 사용하든 연산 갯수는 변하지 않기 때문이다!!
 *
 *   예) 어떤알고리즘은 연산을 5 번해야하고, 어떤알고리즘은 7 번 연산을 해야한다,
 *       걸리는 시간은 변동이 있을 수 있지만!, 그 시간은 항상 연산 갯수에 의해
 *       결정될 것이다!.
 *
 *   --> 이런식으로 시간을 중요하게 생각하기 보다는, 컴퓨터가 실행해야 하는
 *       간단한 연산들의 갯수를 셀 수 있다.
 *
 */
title( '두 번째 코드 분석' );
{
  const addUpTo = ( n ) => {
    /**
     *  === 연산 갯수 ===
     *
     *  - *  :: 곱하기 1번
     *
     *  - +  :: 더하기 1번
     *
     *  - /  :: 나누기 1번
     *
     *  --> 1 과 2 같이 숫자들은 따로 컴퓨터가 연산하거나 하지 않는다
     *      ( 연산들에 비해선... )
     */
    return n * ( n + 1 ) / 2;
  }

  /**
   *  - 위의 코드는 연산을 3번 해야하는 것이다.
   *
   *  --> N 이 어떤 값을 가지고 있던 상관없다.
   *
   *  --> N 이 2든, 1억이든 계산은 딱 3번 이루어진다
   *
   */
}
title( '첫 번째 코드 분석' )
{
  // 아래 코드는 연산을 몇번 더한다.
  const addUpTo = ( n ) => {
    /**
     *   === 연산 갯수 ===
     *
     *   - total = 0   :: 할당 1번
     *
     *   - let i = 1   :: 할당 1번
     *
     *   - i <= n      :: 비교 1번
     *
     *   - i++         :: 더하기 1번, 할당 1번
     *
     *   - total += 1  :: 더하기 1번, 할당 1번
     *
     *   --> 그러나 루프의 갯수에 따라 연산 갯수가 다름
     *
     *   --> n 이 2이면 2 , 1억이면 계산은 1억번이 이루어진다
     *
     *   --> 따라서, 연산이 1번이 아니다.
     *
     *   - n 갯수의 연산!
     *
     *   - 또한, += , ++ 에서 = 기호도 연산이다.
     *
     *   ----> 즉, n 이 커질수록 연산의 갯수가 늘어난다는 뜻이다!
     *
     *   ----> 이런식으로 연산을 일일히 세는 것은 쉽지않다...
     */
    let total = 0;
    for ( let i = 1; i <= n; i++ ){
        total += i;
    }
    return total;
  }

  /**
   *    - 중요한 것은 위 연산들을 일일히 세고 있는 것이 아니다!!
   *
   *    --> 가장 중요한 것은 전체적인 큰 그림이다( 이런 세밀한 것들이 아니고... )
   *
   *    --> 연산의 갯수를 찾으려면 간단하게 ( 5n + 2 ) 로 구할 수는 있다.
   *
   *    - 중요한 것은 정확한 숫자는 사실 상관 없다.
   *
   *    --> 5n + 2 이이든, 3n 이든 , 50n 이든,
   *
   *    - 중요한 것은 전체적인 추세를 보는 것이다
   *      ( 빅 오를 볼때 이것에 집중해야 한다. 가장 중요한 것은 큰 그림이다 )
   *
   *    - 여기서의 중요점 : N 이 커질수록 연산의 갯수도 비례적으로 늘어난다는 것!
   *
   */
}