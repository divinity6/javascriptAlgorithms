/**
 * 프로그람 설명문서 주석
 * 2022.08.01
 *
 *
 *           ===== Big O Notation =====
 *
 */
title( '첫 번째 방법 :  1 부터시작해 n 번째까지 모든 값을 더하는 함수' );
{
  title( '첫 번째 방법' );

  // 첫 번째 방법
  function addUpTo1( n ){
    let total = 0;

    for ( let i = 1; i <= n; i += 1 ){
      total += i;
    }

    return total;

  }

  console.log( addUpTo1( 6 ) );

  debugger;

  title( '두 번째 방법' );

  function addUpTo2( n ){
    return n * ( n + 1 ) / 2;
  }

  console.log( addUpTo2( 6 ) );

  debugger;

  /**
   *  - 미친... 결과가 같잖아!!
   *
   *  --> 수학적인 머리가 필요한거구나
   *
   *  ----> 나는 일반적인 첫번째 방법만 생각했었는데... 그게아니엿네 ㅋㅋㅋ
   */
}

/**
 *
 *  - 위의 두 코드 중 어떤 코드가 더 좋은 코드인가?
 *
 *  --> 좋은 코드가 의미하는 것이 무엇인가?
 *
 *  ----> 더 빠른것인가?
 *
 *  ----> 적은 메모리를 사용하는가?
 *
 *  ----> 쉽게 읽을 수 있는가?
 *
 *  ------> 그러나 모든 것은 상황에 따라 다르다.
 *
 *          속도 , 메모리 사용에 관해서는 나중에 다시 살펴보겠다.
 *          ( 속도와 메모리는 코드를 얼마나 쉽게 읽을 수 있는지와 같은 것들보다는
 *            더 중요하다 )
 *
 *  ------> 좋은 코드를 만들기 위해서는 읽기 쉬움과 메모리 사용성등을 잘 조율하는 것이 중요하다
 *
 *  --> 우선, 속도를 평가하는 것에 집중
 *
 *  ----> 코드가 실행하는데 걸리는 시간을 보면 된다
 *        ( 내장 함수인 타이밍 함수를 사용 )
 *
 */
{
  const t1 = performance.now();

  addUpTo1( 1000000000 );

  const t2 = performance.now();

  console.log( `Time Elapsed : ${ ( t2 - t1 ) / 1000 } seconds.` )
  // :: Time Elapsed : 0.9931999999880791 seconds.

  debugger;

  const a1 = performance.now();

  addUpTo2( 1000000000 );

  const a2 = performance.now();

  console.log( `Time Elapsed : ${ ( a2 - a1 ) / 1000 } seconds.` )
  // :: Time Elapsed : 0 seconds.

  debugger;

  /**
   * - 미친 아래거는 거의 0 초가 나오네...
   *
   * --> 아래코드가 훨신 적은 시간을 들인다
   *
   * --> 같은 데이터를 다루지만 addUpTo2 함수가 훨씬 더 짧은 시간안에 해냈다는 것!
   *
   * ----> 보기에는 마치 addUpTo2 함수가 더 좋아보인다( 그러나 확신할 수 없음 )
   *
   * ----> 빠른 알고리즘에서는 정말 짧은 시간안에 모든 것이 처리된다
   *
   * ----> 또한, 매번 측정할때마다 계산하는 속도가 달라지므로 차이를 정확히 수치화하기는 어렵다
   *
   * --> 그렇다면 어떻게 시간을 측정하지 않고, 어떤 코드가 더 좋은지 평가할 수 있는가?
   *
   * ===========================================================================
   *       이럴 때 코드를 비교하는 특정한 방법이 빅 오 표기법( BIG O NOTATION )이다!!
   * ===========================================================================
   *
   *
   */
}
