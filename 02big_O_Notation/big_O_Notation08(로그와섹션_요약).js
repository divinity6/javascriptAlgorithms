/**
 * 프로그람 설명문서 주석
 * 2022.11.27
 *
 *
 *           ===== Big O Notation =====
 *
 *    ===== O(n^3) 일때, ^의 뜻 : 멱지수( 거듭제곱의횟수를 나타내는 문자 ) n의 3제곱 =====
 *
 *    - 어떤 알고리즘들은 O(1) , O(n) , O(n제곱)처럼 간단하지 않은 경우가 있다
 *
 *    --> 위와같은 경우들은 흔한 복잡도고 이해하기 상당히 쉽다
 *
 *    --> 그러나 빅오 표기법들 중에서는 더 어렵거나 덜 흔한 수학 개념들이 포함되어 있을 수 있다
 *
 *    ----> 그 중 하나의 개념이 로그 알고리즘이다
 *
 *    --> 따라서 해당 알고리즘이 O(n) 이 아닌, O(log n)일 수 있다
 *
 *    - 로그함수
 *
 *    --> 지수함수의 역함수( 같은 식을 어떻게 표현하느냐의 차이 )
 *
 *    ----> 나눗셈과 곱셈이 짝인것처럼 로그함수와 지수함수는 짝이다
 *
 *    예)
 *    - log2(8) = 3
 *
 *    ---> "8 의 로그는 3과 같다" 로 읽을 수 있다
 *    ---> 2의 몇승 값이 8이 되는지를 묻는것
 *         즉 2의 3승
 *    -----> 2(3) = 8
 *
 *    - log2(value)=exponent  === 2(exponent) = value
 *
 *    ----> 이것은 마치
 *              ( 1 / 2 ) 와 ( 1 * 0.5 ) 가 같은 값인것처럼 어떻게 표현하느냐의 방식 차이인것
 *
 *    - 로그 함수는 항상 밑이 2 는 아니고 3 , 10 등 다양하지만, 가장 흔한것이 log2 라는 이진 로그이다
 *      ( log e 라는 것도 있다 )
 *
 *    --> 그러나 신경써야하는 것은 큰 그림이므로 log2 는 무시하도록하겠다
 *        ( log === log2 , log === log3 )
 *
 *    ----> 밑은 상수이기 때문에 3 이든 10이든 상관없기 때문...
 *
 *    ========================================================
 *                          간단한 규칙
 *    ========================================================
 *
 *    - 이진로그 계산하기 위해서는 그 숫자가 1보다 같거나작아지기 전에 2로 나눠지는 횟수이다
 *
 *    --> 예) 8 의 이진로그
 *    --> (8 / 2) = (4 / 2) = (2/ 2) = 1
 *    ----> 3번 나누있기 때문에 log2(8) = 3
 *
 *    --> 예) 25 의 이진로그
 *    --> (25 / 2) = (12.5 / 2) = (6.25 / 2) = (3.125 / 2) = (1.5625 / 2) = 0.78125
 *    ----> 정확하게 1로 나누어떨어지지 않는다.
 *    ----> log2(25) = 4.64
 *
 *    --> 이러한 실제 계산이 중요한게 아니라 실제 그래프에 어떻게 보이는가이다
 *
 *    - log 시간복잡도는 매우 좋다
 *
 *    ==> O(1) , O(log n) , O(n) , O(nlog n) , O(n2)
 *
 *    --> 어떤 알고리즘이 log n 시간 복잡도를 가지고 있다면 이것은 엄청 좋은것이다
 *
 *    --> O(nlog n) 은 그래도 이차 시간복잡도인 O(n2) 보다는 좋다
 *
 *    ----> O(log n) 은 진짜 조금씩만 상승하기때문에 O(n) 보다 훨씬 좋다
 *
 *    ========================================================
 *                    이런 개념들이 어디에 나타나는가?
 *    ========================================================
 *
 *    - 어떤 탐색 알고리즘들은 log 시간 복잡도를 가지고 있다
 *
 *    - 효율적인 정렬 알고리즘들도 log 와 관련되어 있다
 *      ( 모든 정렬 알고리즘이 그렇지는 않지만 효율적인 것들은 그렇다 )
 *
 *    - 재귀
 *
 *    --> 탐색 알고리즘, 정렬 알고리즘, 재귀 가 로그와 관련되어 있다
 *        ( 재귀에서는 시간이 아닌 공간 복잡도와 연관되어 있다 )
 *
 *    ========================================================
 *                             정리
 *    ========================================================
 *
 *    - 알고리즘의 성능을 분석하기 위해서는 BIG O NOTATION( 빅 오 표기법 ) 을 사용한다
 *    --> 입력의 크기가 늘어날수록 전체적인 추세와 관련되어 있다
 *    --> 시간복잡도 or 공간복잡도
 *
 *    - 정확도가 아닌, 전체적인 추세를 중요하게 생각한다
 *
 *    - BIG O 로 측정되는 알고리즘의 시간과 공간 복잡도는 하드웨어에 영향을 받지 않는다
 *    --> 빅오는 실행될 연산의 갯수를 따지기 때문이다
 *    ----> 내 컴퓨터에서 10밀리초가 걸리고, 슈퍼컴퓨터에서는 1밀리초가 걸리는등의 차이는 중요하지 않다
 *
 *    - BIG O NOTATION 은 세상 어디에서든 사용한다
 *
 *    --> BIG O 를 통해 알고리즘을 비교할 수 있게 된것이다( 어떤알고리즘이 좋고, 안좋고등 )
 *
 * */
title( '로그와 섹션 요약' );
{
}